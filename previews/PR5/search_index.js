var documenterSearchIndex = {"docs":
[{"location":"Graphs/#Graphs","page":"Graphs","title":"Graphs","text":"","category":"section"},{"location":"Graphs/","page":"Graphs","title":"Graphs","text":"CurrentModule = GCMMesh.Graphs","category":"page"},{"location":"Graphs/","page":"Graphs","title":"Graphs","text":"Graph","category":"page"},{"location":"Graphs/#GCMMesh.Graphs.Graph","page":"Graphs","title":"GCMMesh.Graphs.Graph","text":"Graph{I,FT,IA1D} <: AbstractGraph\n\nConnectivity graph for a mesh.\n\nFields\n\nnverts\nnumber of graph vertices\nedge_data\nedge data for each vertex\nedge_offset\nedge data offsets for each vertex\nvertices\nvertex numbers\nspectral_radius\nspectral radius estimate/bound of graph laplacian matrix\n\n\n\n\n\n","category":"type"},{"location":"Graphs/","page":"Graphs","title":"Graphs","text":"build_vertex_graph\nbuild_face_graph\nlaplacian_x_v!\nfiedler_vector\nlaplacian_matrix_full\nsplit_graph","category":"page"},{"location":"Graphs/#GCMMesh.Graphs.build_vertex_graph","page":"Graphs","title":"GCMMesh.Graphs.build_vertex_graph","text":"build_vertex_graph(mesh::AbstractMesh{I,FT}) where {I,FT}\n\nThis function builds a graph, with adjacency based on mesh elements connected by a vertex.\n\n\n\n\n\n","category":"function"},{"location":"Graphs/#GCMMesh.Graphs.build_face_graph","page":"Graphs","title":"GCMMesh.Graphs.build_face_graph","text":"build_face_graph(mesh::AbstractMesh{I,FT}) where {I,FT}\n\nThis function builds a graph, with adjacency based on mesh elements connected by a face.\n\n\n\n\n\n","category":"function"},{"location":"Graphs/#GCMMesh.Graphs.laplacian_x_v!","page":"Graphs","title":"GCMMesh.Graphs.laplacian_x_v!","text":"laplacian_x_v!(vout::FTA1D, vin::FTA1D, grph::Graph)\n\nThis function computed the product of graph Laplacian matrix with vector vin.\n\n\n\n\n\n","category":"function"},{"location":"Graphs/#GCMMesh.Graphs.fiedler_vector","page":"Graphs","title":"GCMMesh.Graphs.fiedler_vector","text":"fiedler_vector(graph::Graph{<:Any,FT}, ::Lanczos)\n\nThis function estimates the Fiedler vector using Lanczos method.\n\nReference: Estimating the Largest Eigenvalue by the Power and Lanczos Algorithms with a Random Start Kuczynski, Jacek; Wozniakowski, Henryk\n\nhttps://academiccommons.columbia.edu/doi/10.7916/D8B56SVV\n\n\n\n\n\nfiedler_vector(graph::Graph{<:Any,FT}, ::PowerIt)\n\nThis function estimates the Fiedler vector using power iteration.\n\n\n\n\n\nfiedler_vector(graph::Graph{<:Any,FT}, ::Direct)\n\nThis function computes the Fiedler vector using Julia/LAPACK subroutines. This is intended for testing purposes only. Lanczos method is the  recommended default.\n\n\n\n\n\n","category":"function"},{"location":"Graphs/#GCMMesh.Graphs.laplacian_matrix_full","page":"Graphs","title":"GCMMesh.Graphs.laplacian_matrix_full","text":"laplacian_matrix_full(graph::Graph{<:Any,FT})\n\nComputed the full Graph laplacian matrix explicitly. This is  recommended for testing purposes only.\n\n\n\n\n\n","category":"function"},{"location":"Graphs/#GCMMesh.Graphs.split_graph","page":"Graphs","title":"GCMMesh.Graphs.split_graph","text":"split_graph(graph::Graph{I,FT}, n1)\n\nThis function partitions the graph such that the first partition has n1 vertices and second partition has graph.nverts - n1 vertices.\n\n\n\n\n\n","category":"function"},{"location":"Mesh/#Mesh","page":"Mesh","title":"Mesh","text":"","category":"section"},{"location":"Mesh/","page":"Mesh","title":"Mesh","text":"CurrentModule = GCMMesh.Mesh","category":"page"},{"location":"Mesh/","page":"Mesh","title":"Mesh","text":"Mesh2D\nMesh3D","category":"page"},{"location":"Mesh/#GCMMesh.Mesh.Mesh2D","page":"Mesh","title":"GCMMesh.Mesh.Mesh2D","text":"Mesh2D{I,IA2D,FT,FTA2D} <: AbstractMesh{FT}\n\nConformal mesh for a 2D manifold. The manifold can be  embedded in a higher dimensional space.\n\n                    Quadrilateral\n\n            v4            f3           v3\n              o------------------------o\n              |                        |      face    vertices\n              |       <----------      |             \n              |                 |      |        f1 =>  v1 v2 \n           f4 |                 |      | f2     f2 =>  v2 v3\n              |                 |      |        f3 =>  v3 v4\n              |                 |      |        f4 =>  v4 v1\n              |       -----------      |\n              |                        |\n              o------------------------o\n             v1           f1           v2\n\nReference: https://gsjaardema.github.io/seacas-docs/html/element_types.html#ordering\n\nFields\n\nnverts\nnumber of unique vertices in the mesh\nnfaces\nnumber of unique faces in the mesh\nnelems\nnumber of elements in the mesh\nnbndry\nnumber of zones in the mesh\ncoordinates\nx₁, x₂, ... coordinates of vertices (nverts, dim), dim can be greater than 2 for 2D manifolds embedded in higher dimensional space\nunique_verts\nunique vertices (n_uniquevertices)\nuverts_conn\nconnectivity information for unique vertices\nuverts_offset\noffset information for uvertsconn `(nunique_verts + 1)`\nface_verts\nface vertices numbers (nfaces, 2)\nface_neighbors\nboundary elems for each face (nfaces, 5) -> [elem1, localface1, elem2, localface2, relative orientation]\nface_boundary\nface numbers on each boundary (nfaces)\nboundary_tags\nboundary tags\nboundary_tag_names\nboundary tag names\nface_boundary_offset\nface boundary offset for each boundary for face_boundary array\nelem_verts\nvertices numbers for each elem (nelems, 4)\nelem_faces\nface numbers for each elem (nelems, 4)\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#GCMMesh.Mesh.Mesh3D","page":"Mesh","title":"GCMMesh.Mesh.Mesh3D","text":"Mesh3D{I,IA2D,FT,FTA2D} <: AbstractMesh{FT}\n\nConformal mesh for 3D manifold.\n\n                       Hexahedron\n                 v8                     v7      \n                  o--------------------o       face no     loop     normal\n                 /|                   /|                                   \n                / |                  / |       face 1:=>  1 2 6 5     in (-y)\n               /  |                 /  |       face 2:=>  2 3 7 6    out (+x)\n              /   |                /   |       face 3:=>  3 4 8 7    out (+y)\n             /    |               /    |       face 4:=>  1 5 8 4     in (-x)\n            /     |            v6/     |       face 5:=>  1 4 3 2    out (-z)\n        v5 o--------------------o      |       face 6:=>  5 6 7 8     in (+z)\n           |    v4o-------------|------o v3 \n           |     /              |     /        edge no    vertices\n           |    /               |    /                              \n           |   /                |   /          edge  1:=>  1 2\n           |  /                 |  /           edge  2:=>  2 3\n           | /                  | /            edge  3:=>  3 4 \n           |/                   |/             edge  4:=>  4 1\n           o--------------------o              edge  5:=>  1 5\n          v1                    v2             edge  6:=>  2 6 \n                                               edge  7:=>  3 7 \n                                               edge  8:=>  4 8\n                                               edge  9:=>  5 6\n                                               edge 10:=>  6 7\n                                               edge 11:=>  7 8\n                                               edge 12:=>  8 5\n\nhttps://gsjaardema.github.io/seacas-docs/html/element_types.html#ordering\n\nFields\n\nnverts\nnumber of nodes in the mesh\nnedges\nnumber of edges in the mesh\nnfaces\nnumber of faces in the mesh\nnelems\nnumber of elements in the mesh\nnbndry\nnumber of zones in the mesh\ncoordinates\nx₁, x₂, x₃ coordinates of nodes (nverts, 3)\nunique_verts\nunique vertices (n_uniquevertices)\nuverts_conn\nconnectivity information for unique vertices\nuverts_offset\noffset information for uvertsconn `(nunique_verts + 1)`\nedge_verts\nedge vertex numbers (nedges, 2)\nface_verts\nface vertices numbers (nfaces, 4)\nface_edges\nface edge numbers (nfaces, 4)\nface_neighbors\nboundary elems for each face (nfaces, 5) -> [elem1, localface1, elem2, localface2, relative orientation]\nface_boundary\nface numbers on each boundary (nfaces)\nboundary_tags\nboundary tags\nboundary_tag_names\nboundary tag names\nface_boundary_offset\nface boundary offset for each boundary for face_boundary array\nelem_verts\nvertices numbers for each elem (nelems, 4)\nelem_faces\nface numbers for each elem (nelems, 4)\nelem_edges\nedge numbers for each elem (nelems, 12)\n\n\n\n\n\n","category":"type"},{"location":"Mesh/","page":"Mesh","title":"Mesh","text":"equispaced_rectangular_mesh\ncube_panel_mesh\nsphere_mesh\ncubed_sphere_warp","category":"page"},{"location":"Mesh/#GCMMesh.Mesh.equispaced_rectangular_mesh","page":"Mesh","title":"GCMMesh.Mesh.equispaced_rectangular_mesh","text":"equispaced_rectangular_mesh(\nx1min::FT,\nx2min::FT,\nx1max::FT,\nx2max::FT,\nn1,\nn2,\nper = (false, false),\n\n) where {FT<:AbstractFloat}\n\nThis function generates an equispaced rectangular mesh with user provided coordinates of left bottom and right top vertices, number of mesh elements in each direction and periodicity information.\n\n\n\n\n\n","category":"function"},{"location":"Mesh/#GCMMesh.Mesh.cube_panel_mesh","page":"Mesh","title":"GCMMesh.Mesh.cube_panel_mesh","text":"cube_panel_mesh(ne)\n\nThis function builds a cube panel mesh with a resolution of ne elements along each edge.\n\n           v8 (xs,xe,xe)          v7 (xe,xe,xe)\n             o--------e11---------o       \n            /|                   /|                                   \n           / |                  / |       \n          /  |                 /  |       \n        e12  e8               e10 e7       \n        /    |               /    |       \n       /     |            v6/     |       \n   v5 o--------e9----------o      |       \n      |    v4o------e3-----|------o v3 (xe,xe,xs)\n      |     /   o------->  |     / \n      |    /   /           |    / \n      e5  e4  /           e6   e2 \n      |  /   /             |  / \n      | /   /              | / \n      |/   o               |/ \n      o--------e1----------o   \n     v1                    v2 \n   (xs,xs,xs)               (xe,xs,xs)\n\n   panel 1 => 1 4 3 2\n   panel 2 => 2 3 7 6\n   panel 3 => 3 4 8 7\n   panel 4 => 1 5 8 4\n   panel 5 => 1 2 6 5\n   panel 6 => 5 6 7 8\n\n   edge  1 => 1 2 \n   edge  2 => 2 3\n   edge  3 => 3 4\n   edge  4 => 4 1\n   edge  5 => 1 5\n   edge  6 => 2 6\n   edge  7 => 3 7\n   edge  8 => 4 8\n   edge  9 => 5 6\n   edge 10 => 6 7\n   edge 11 => 7 8\n   edge 12 => 8 5\n\n\n        v8 +---e11---+ v7\n           | ^       |\n           | |       |\n          e8 ^   3   e7 \n           | |       |\n        v4 | o--<-o  | v3      v7        v8\n\nv8 +–-e8––+–-e3––+––e7–-+–-e11–-+      | ^       | o–>->  | o–>–> | ^       |       | |       | |       | |       | |       |    e12 ^  4   e4 ^  1   e2 ^  2   e10^  6   e12      | |       | |       | |       | |       |      | o-<-<-o | o       | o       | o<-<–o |      +–-e5––+–-e1––+––e6–-+––e9–-+     v5       v1| o–>–o | v2      v6        v5                |       | |               e5    5  | e6                |       ↓ |                |         |                +–-e9––+               v5         v6\n\n\n\n\n\n","category":"function"},{"location":"Mesh/#GCMMesh.Mesh.sphere_mesh","page":"Mesh","title":"GCMMesh.Mesh.sphere_mesh","text":"sphere_mesh(ne, radius::FT, wtype::AbstractSphereWarp) where {FT<:AbstractFloat}\n\nGenerates a sphere mesh of a given radius, warp type and number of elements along each side of a cubed surface. The sphere mesh is generated by applying the warping function to a cube panel mesh.\n\n\n\n\n\n","category":"function"},{"location":"Mesh/#GCMMesh.Mesh.cubed_sphere_warp","page":"Mesh","title":"GCMMesh.Mesh.cubed_sphere_warp","text":"cubed_sphere_warp(::EquiangularSphereWarp, a, b, c)\n\nGiven points (a, b, c) on the surface of a cube, warp the points out to a spherical shell of radius R based on the equiangular gnomonic grid proposed by [Ronchi1996]\n\nReturns a tuple of (x1, x2, x3), where x1, x2, x3 are the corresponding coordinates on a sphere of radius R.\n\nThe \"Cubed Sphere\": A New Method for the Solution of Partial Differential Equations in Spherical Geometry C. RONCHI,,1 R. IACONO, AND P. S. PAOLUCCI† JOURNAL OF COMPUTATIONAL PHYSICS 124, 93–114 (1996) https://github.com/CliMA/ClimateMachine.jl/blob/master/src/Numerics/Mesh/Topologies.jl\n\n\n\n\n\ncubed_sphere_warp(::EquidistantSphereWarp, a, b, c)\n\nReturns a tuple of (x1, x2, x3), where x1, x2, x3 are the corresponding coordinates on a sphere of radius R.\n\nhttps://github.com/CliMA/ClimateMachine.jl/blob/master/src/Numerics/Mesh/Topologies.jl\n\n\n\n\n\n","category":"function"},{"location":"#GCMMesh","page":"Home","title":"GCMMesh","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Computes meshes and partitions for box and spherical shell domains typically used for dynamical core simulations.","category":"page"},{"location":"Partition/#Partition","page":"Partition","title":"Partition","text":"","category":"section"},{"location":"Partition/","page":"Partition","title":"Partition","text":"CurrentModule = GCMMesh.Partition","category":"page"},{"location":"Partition/","page":"Partition","title":"Partition","text":"rsb_partition","category":"page"},{"location":"Partition/#GCMMesh.Partition.rsb_partition","page":"Partition","title":"GCMMesh.Partition.rsb_partition","text":"rsb_partition(mesh::AbstractMesh{I,FT}, npart::I)\n\nThis function partitions the mesh into npart partitions using Recursive Spectral Bisection.\n\n\n\n\n\n","category":"function"}]
}
